// this code is generated by python3 src/gen_bint_header.py proto
#if MCL_BINT_ASM == 1
extern "C" Unit mclb_add1(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<1>(Unit *z, const Unit *x, const Unit *y) { return mclb_add1(z, x, y); }
extern "C" Unit mclb_sub1(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<1>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub1(z, x, y); }
extern "C" Unit mclb_add2(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<2>(Unit *z, const Unit *x, const Unit *y) { return mclb_add2(z, x, y); }
extern "C" Unit mclb_sub2(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<2>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub2(z, x, y); }
extern "C" Unit mclb_add3(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<3>(Unit *z, const Unit *x, const Unit *y) { return mclb_add3(z, x, y); }
extern "C" Unit mclb_sub3(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<3>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub3(z, x, y); }
extern "C" Unit mclb_add4(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<4>(Unit *z, const Unit *x, const Unit *y) { return mclb_add4(z, x, y); }
extern "C" Unit mclb_sub4(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<4>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub4(z, x, y); }
extern "C" Unit mclb_add5(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<5>(Unit *z, const Unit *x, const Unit *y) { return mclb_add5(z, x, y); }
extern "C" Unit mclb_sub5(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<5>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub5(z, x, y); }
extern "C" Unit mclb_add6(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<6>(Unit *z, const Unit *x, const Unit *y) { return mclb_add6(z, x, y); }
extern "C" Unit mclb_sub6(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<6>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub6(z, x, y); }
extern "C" Unit mclb_add7(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<7>(Unit *z, const Unit *x, const Unit *y) { return mclb_add7(z, x, y); }
extern "C" Unit mclb_sub7(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<7>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub7(z, x, y); }
extern "C" Unit mclb_add8(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<8>(Unit *z, const Unit *x, const Unit *y) { return mclb_add8(z, x, y); }
extern "C" Unit mclb_sub8(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<8>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub8(z, x, y); }
extern "C" Unit mclb_add9(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<9>(Unit *z, const Unit *x, const Unit *y) { return mclb_add9(z, x, y); }
extern "C" Unit mclb_sub9(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<9>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub9(z, x, y); }
extern "C" Unit mclb_add10(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<10>(Unit *z, const Unit *x, const Unit *y) { return mclb_add10(z, x, y); }
extern "C" Unit mclb_sub10(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<10>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub10(z, x, y); }
extern "C" Unit mclb_add11(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<11>(Unit *z, const Unit *x, const Unit *y) { return mclb_add11(z, x, y); }
extern "C" Unit mclb_sub11(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<11>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub11(z, x, y); }
extern "C" Unit mclb_add12(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<12>(Unit *z, const Unit *x, const Unit *y) { return mclb_add12(z, x, y); }
extern "C" Unit mclb_sub12(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<12>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub12(z, x, y); }
extern "C" Unit mclb_add13(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<13>(Unit *z, const Unit *x, const Unit *y) { return mclb_add13(z, x, y); }
extern "C" Unit mclb_sub13(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<13>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub13(z, x, y); }
extern "C" Unit mclb_add14(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<14>(Unit *z, const Unit *x, const Unit *y) { return mclb_add14(z, x, y); }
extern "C" Unit mclb_sub14(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<14>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub14(z, x, y); }
extern "C" Unit mclb_add15(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<15>(Unit *z, const Unit *x, const Unit *y) { return mclb_add15(z, x, y); }
extern "C" Unit mclb_sub15(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<15>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub15(z, x, y); }
extern "C" Unit mclb_add16(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<16>(Unit *z, const Unit *x, const Unit *y) { return mclb_add16(z, x, y); }
extern "C" Unit mclb_sub16(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<16>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub16(z, x, y); }
#if MCL_SIZEOF_UNIT == 4
extern "C" Unit mclb_add17(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<17>(Unit *z, const Unit *x, const Unit *y) { return mclb_add17(z, x, y); }
extern "C" Unit mclb_sub17(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<17>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub17(z, x, y); }
extern "C" Unit mclb_add18(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<18>(Unit *z, const Unit *x, const Unit *y) { return mclb_add18(z, x, y); }
extern "C" Unit mclb_sub18(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<18>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub18(z, x, y); }
extern "C" Unit mclb_add19(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<19>(Unit *z, const Unit *x, const Unit *y) { return mclb_add19(z, x, y); }
extern "C" Unit mclb_sub19(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<19>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub19(z, x, y); }
extern "C" Unit mclb_add20(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<20>(Unit *z, const Unit *x, const Unit *y) { return mclb_add20(z, x, y); }
extern "C" Unit mclb_sub20(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<20>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub20(z, x, y); }
extern "C" Unit mclb_add21(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<21>(Unit *z, const Unit *x, const Unit *y) { return mclb_add21(z, x, y); }
extern "C" Unit mclb_sub21(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<21>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub21(z, x, y); }
extern "C" Unit mclb_add22(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<22>(Unit *z, const Unit *x, const Unit *y) { return mclb_add22(z, x, y); }
extern "C" Unit mclb_sub22(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<22>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub22(z, x, y); }
extern "C" Unit mclb_add23(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<23>(Unit *z, const Unit *x, const Unit *y) { return mclb_add23(z, x, y); }
extern "C" Unit mclb_sub23(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<23>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub23(z, x, y); }
extern "C" Unit mclb_add24(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<24>(Unit *z, const Unit *x, const Unit *y) { return mclb_add24(z, x, y); }
extern "C" Unit mclb_sub24(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<24>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub24(z, x, y); }
extern "C" Unit mclb_add25(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<25>(Unit *z, const Unit *x, const Unit *y) { return mclb_add25(z, x, y); }
extern "C" Unit mclb_sub25(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<25>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub25(z, x, y); }
extern "C" Unit mclb_add26(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<26>(Unit *z, const Unit *x, const Unit *y) { return mclb_add26(z, x, y); }
extern "C" Unit mclb_sub26(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<26>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub26(z, x, y); }
extern "C" Unit mclb_add27(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<27>(Unit *z, const Unit *x, const Unit *y) { return mclb_add27(z, x, y); }
extern "C" Unit mclb_sub27(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<27>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub27(z, x, y); }
extern "C" Unit mclb_add28(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<28>(Unit *z, const Unit *x, const Unit *y) { return mclb_add28(z, x, y); }
extern "C" Unit mclb_sub28(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<28>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub28(z, x, y); }
extern "C" Unit mclb_add29(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<29>(Unit *z, const Unit *x, const Unit *y) { return mclb_add29(z, x, y); }
extern "C" Unit mclb_sub29(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<29>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub29(z, x, y); }
extern "C" Unit mclb_add30(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<30>(Unit *z, const Unit *x, const Unit *y) { return mclb_add30(z, x, y); }
extern "C" Unit mclb_sub30(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<30>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub30(z, x, y); }
extern "C" Unit mclb_add31(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<31>(Unit *z, const Unit *x, const Unit *y) { return mclb_add31(z, x, y); }
extern "C" Unit mclb_sub31(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<31>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub31(z, x, y); }
extern "C" Unit mclb_add32(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit addT<32>(Unit *z, const Unit *x, const Unit *y) { return mclb_add32(z, x, y); }
extern "C" Unit mclb_sub32(Unit *z, const Unit *x, const Unit *y);
template<> inline Unit subT<32>(Unit *z, const Unit *x, const Unit *y) { return mclb_sub32(z, x, y); }
#endif // #if MCL_SIZEOF_UNIT == 4
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit1)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow1(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast1(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit1(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<1>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit1(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd1)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow1(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast1(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd1(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<1>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd1(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit2)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow2(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast2(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit2(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<2>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit2(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd2)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow2(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast2(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd2(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<2>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd2(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit3)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow3(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast3(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit3(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<3>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit3(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd3)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow3(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast3(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd3(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<3>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd3(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit4)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow4(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast4(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit4(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<4>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit4(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd4)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow4(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast4(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd4(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<4>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd4(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit5)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow5(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast5(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit5(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<5>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit5(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd5)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow5(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast5(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd5(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<5>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd5(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit6)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow6(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast6(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit6(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<6>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit6(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd6)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow6(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast6(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd6(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<6>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd6(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit7)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow7(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast7(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit7(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<7>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit7(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd7)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow7(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast7(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd7(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<7>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd7(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit8)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow8(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast8(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit8(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<8>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit8(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd8)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow8(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast8(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd8(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<8>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd8(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit9)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow9(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast9(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit9(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<9>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit9(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd9)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow9(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast9(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd9(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<9>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd9(z, x, y); }
#if MCL_SIZEOF_UNIT == 4
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit10)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow10(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast10(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit10(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<10>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit10(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd10)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow10(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast10(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd10(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<10>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd10(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit11)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow11(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast11(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit11(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<11>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit11(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd11)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow11(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast11(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd11(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<11>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd11(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit12)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow12(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast12(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit12(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<12>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit12(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd12)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow12(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast12(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd12(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<12>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd12(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit13)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow13(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast13(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit13(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<13>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit13(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd13)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow13(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast13(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd13(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<13>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd13(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit14)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow14(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast14(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit14(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<14>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit14(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd14)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow14(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast14(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd14(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<14>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd14(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit15)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow15(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast15(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit15(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<15>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit15(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd15)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow15(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast15(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd15(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<15>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd15(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit16)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow16(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast16(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit16(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<16>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit16(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd16)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow16(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast16(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd16(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<16>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd16(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnit17)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_slow17(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnit_fast17(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnit17(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitT<17>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnit17(z, x, y); }
#if MCL_BINT_ASM_X64 == 1
extern "C" Unit (*mclb_mulUnitAdd17)(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_slow17(Unit *z, const Unit *x, Unit y);
extern "C" Unit mclb_mulUnitAdd_fast17(Unit *z, const Unit *x, Unit y);
#else
extern "C" Unit mclb_mulUnitAdd17(Unit *z, const Unit *x, Unit y);
#endif
template<> inline Unit mulUnitAddT<17>(Unit *z, const Unit *x, Unit y) { return mclb_mulUnitAdd17(z, x, y); }
#endif // #if MCL_SIZEOF_UNIT == 4
#endif // #if MCL_BINT_ASM == 1
#if MCL_SIZEOF_UNIT == 8
	#define MCL_BINT_ADD_N 16
	#define MCL_BINT_MUL_N 9
#else
	#define MCL_BINT_ADD_N 32
	#define MCL_BINT_MUL_N 17
#endif
extern "C" Unit (*mclb_addTbl[])(Unit *z, const Unit *x, const Unit *y);
inline Unit (*mclb_get_add(size_t n))(Unit *z, const Unit *x, const Unit *y)
{
	if (n > MCL_BINT_ADD_N) n = 0;
	assert(n > 0);
	return mclb_addTbl[n];
}
extern "C" Unit (*mclb_subTbl[])(Unit *z, const Unit *x, const Unit *y);
inline Unit (*mclb_get_sub(size_t n))(Unit *z, const Unit *x, const Unit *y)
{
	if (n > MCL_BINT_ADD_N) n = 0;
	assert(n > 0);
	return mclb_subTbl[n];
}
extern "C" Unit (*mclb_mulUnitTbl[])(Unit *z, const Unit *x, Unit y);
inline Unit (*mclb_get_mulUnit(size_t n))(Unit *z, const Unit *x, Unit y)
{
	if (n > MCL_BINT_MUL_N) n = 0;
	assert(n > 0);
	return mclb_mulUnitTbl[n];
}
extern "C" Unit (*mclb_mulUnitAddTbl[])(Unit *z, const Unit *x, Unit y);
inline Unit (*mclb_get_mulUnitAdd(size_t n))(Unit *z, const Unit *x, Unit y)
{
	if (n > MCL_BINT_MUL_N) n = 0;
	assert(n > 0);
	return mclb_mulUnitAddTbl[n];
}
