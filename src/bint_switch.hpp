// this code is generated by python3 src/gen_bint_header.py switch
#if MCL_BINT_ASM != 1
template Unit addT<1>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<2>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<3>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<4>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<5>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<6>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<7>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<8>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<9>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<10>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<11>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<12>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<13>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<14>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<15>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<16>(Unit *z, const Unit *x, const Unit *y);
#if MCL_SIZEOF_UNIT == 4
template Unit addT<17>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<18>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<19>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<20>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<21>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<22>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<23>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<24>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<25>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<26>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<27>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<28>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<29>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<30>(Unit *z, const Unit *x, const Unit *y);
template Unit addT<31>(Unit *z, const Unit *x, const Unit *y);
#endif
template Unit subT<1>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<2>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<3>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<4>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<5>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<6>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<7>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<8>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<9>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<10>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<11>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<12>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<13>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<14>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<15>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<16>(Unit *z, const Unit *x, const Unit *y);
#if MCL_SIZEOF_UNIT == 4
template Unit subT<17>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<18>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<19>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<20>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<21>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<22>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<23>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<24>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<25>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<26>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<27>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<28>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<29>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<30>(Unit *z, const Unit *x, const Unit *y);
template Unit subT<31>(Unit *z, const Unit *x, const Unit *y);
#endif
template Unit mulUnitT<1>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<2>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<3>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<4>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<5>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<6>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<7>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<8>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<9>(Unit *z, const Unit *x, Unit y);
#if MCL_SIZEOF_UNIT == 4
template Unit mulUnitT<10>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<11>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<12>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<13>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<14>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<15>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitT<16>(Unit *z, const Unit *x, Unit y);
#endif
template Unit mulUnitAddT<1>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<2>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<3>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<4>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<5>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<6>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<7>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<8>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<9>(Unit *z, const Unit *x, Unit y);
#if MCL_SIZEOF_UNIT == 4
template Unit mulUnitAddT<10>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<11>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<12>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<13>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<14>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<15>(Unit *z, const Unit *x, Unit y);
template Unit mulUnitAddT<16>(Unit *z, const Unit *x, Unit y);
#endif
#endif // MCL_BINT_ASM != 1
Unit (*mclb_addTbl[])(Unit *z, const Unit *x, const Unit *y) = {
#if MCL_BINT_ASM == 1
	0,
	mclb_add1,
	mclb_add2,
	mclb_add3,
	mclb_add4,
	mclb_add5,
	mclb_add6,
	mclb_add7,
	mclb_add8,
	mclb_add9,
	mclb_add10,
	mclb_add11,
	mclb_add12,
	mclb_add13,
	mclb_add14,
	mclb_add15,
	mclb_add16,
#if MCL_SIZEOF_UNIT == 4
	mclb_add17,
	mclb_add18,
	mclb_add19,
	mclb_add20,
	mclb_add21,
	mclb_add22,
	mclb_add23,
	mclb_add24,
	mclb_add25,
	mclb_add26,
	mclb_add27,
	mclb_add28,
	mclb_add29,
	mclb_add30,
	mclb_add31,
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	0,
	addT<1>,
	addT<2>,
	addT<3>,
	addT<4>,
	addT<5>,
	addT<6>,
	addT<7>,
	addT<8>,
	addT<9>,
	addT<10>,
	addT<11>,
	addT<12>,
	addT<13>,
	addT<14>,
	addT<15>,
	addT<16>,
#if MCL_SIZEOF_UNIT == 4
	addT<17>,
	addT<18>,
	addT<19>,
	addT<20>,
	addT<21>,
	addT<22>,
	addT<23>,
	addT<24>,
	addT<25>,
	addT<26>,
	addT<27>,
	addT<28>,
	addT<29>,
	addT<30>,
	addT<31>,
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
};
Unit addN(Unit *z, const Unit *x, const Unit *y, size_t n)
{
	return mclb_get_add(n)(z, x, y);
}
Unit (*mclb_subTbl[])(Unit *z, const Unit *x, const Unit *y) = {
#if MCL_BINT_ASM == 1
	0,
	mclb_sub1,
	mclb_sub2,
	mclb_sub3,
	mclb_sub4,
	mclb_sub5,
	mclb_sub6,
	mclb_sub7,
	mclb_sub8,
	mclb_sub9,
	mclb_sub10,
	mclb_sub11,
	mclb_sub12,
	mclb_sub13,
	mclb_sub14,
	mclb_sub15,
	mclb_sub16,
#if MCL_SIZEOF_UNIT == 4
	mclb_sub17,
	mclb_sub18,
	mclb_sub19,
	mclb_sub20,
	mclb_sub21,
	mclb_sub22,
	mclb_sub23,
	mclb_sub24,
	mclb_sub25,
	mclb_sub26,
	mclb_sub27,
	mclb_sub28,
	mclb_sub29,
	mclb_sub30,
	mclb_sub31,
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	0,
	subT<1>,
	subT<2>,
	subT<3>,
	subT<4>,
	subT<5>,
	subT<6>,
	subT<7>,
	subT<8>,
	subT<9>,
	subT<10>,
	subT<11>,
	subT<12>,
	subT<13>,
	subT<14>,
	subT<15>,
	subT<16>,
#if MCL_SIZEOF_UNIT == 4
	subT<17>,
	subT<18>,
	subT<19>,
	subT<20>,
	subT<21>,
	subT<22>,
	subT<23>,
	subT<24>,
	subT<25>,
	subT<26>,
	subT<27>,
	subT<28>,
	subT<29>,
	subT<30>,
	subT<31>,
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
};
Unit subN(Unit *z, const Unit *x, const Unit *y, size_t n)
{
	return mclb_get_sub(n)(z, x, y);
}
#if MCL_BINT_ASM_X64 != 1
Unit (*mclb_mulUnitTbl[])(Unit *z, const Unit *x, Unit y) = {
#if MCL_BINT_ASM == 1
	0,
	mclb_mulUnit1,
	mclb_mulUnit2,
	mclb_mulUnit3,
	mclb_mulUnit4,
	mclb_mulUnit5,
	mclb_mulUnit6,
	mclb_mulUnit7,
	mclb_mulUnit8,
	mclb_mulUnit9,
#if MCL_SIZEOF_UNIT == 4
	mclb_mulUnit10,
	mclb_mulUnit11,
	mclb_mulUnit12,
	mclb_mulUnit13,
	mclb_mulUnit14,
	mclb_mulUnit15,
	mclb_mulUnit16,
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	0,
	mulUnitT<1>,
	mulUnitT<2>,
	mulUnitT<3>,
	mulUnitT<4>,
	mulUnitT<5>,
	mulUnitT<6>,
	mulUnitT<7>,
	mulUnitT<8>,
	mulUnitT<9>,
#if MCL_SIZEOF_UNIT == 4
	mulUnitT<10>,
	mulUnitT<11>,
	mulUnitT<12>,
	mulUnitT<13>,
	mulUnitT<14>,
	mulUnitT<15>,
	mulUnitT<16>,
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
};
#endif // MCL_BINT_ASM_X64 != 1
Unit mulUnitN(Unit *z, const Unit *x, Unit y, size_t n)
{
	return mclb_get_mulUnit(n)(z, x, y);
}
#if MCL_BINT_ASM_X64 != 1
Unit (*mclb_mulUnitAddTbl[])(Unit *z, const Unit *x, Unit y) = {
#if MCL_BINT_ASM == 1
	0,
	mclb_mulUnitAdd1,
	mclb_mulUnitAdd2,
	mclb_mulUnitAdd3,
	mclb_mulUnitAdd4,
	mclb_mulUnitAdd5,
	mclb_mulUnitAdd6,
	mclb_mulUnitAdd7,
	mclb_mulUnitAdd8,
	mclb_mulUnitAdd9,
#if MCL_SIZEOF_UNIT == 4
	mclb_mulUnitAdd10,
	mclb_mulUnitAdd11,
	mclb_mulUnitAdd12,
	mclb_mulUnitAdd13,
	mclb_mulUnitAdd14,
	mclb_mulUnitAdd15,
	mclb_mulUnitAdd16,
#endif // MCL_SIZEOF_UNIT == 4
#else // MCL_BITN_ASM == 1
	0,
	mulUnitAddT<1>,
	mulUnitAddT<2>,
	mulUnitAddT<3>,
	mulUnitAddT<4>,
	mulUnitAddT<5>,
	mulUnitAddT<6>,
	mulUnitAddT<7>,
	mulUnitAddT<8>,
	mulUnitAddT<9>,
#if MCL_SIZEOF_UNIT == 4
	mulUnitAddT<10>,
	mulUnitAddT<11>,
	mulUnitAddT<12>,
	mulUnitAddT<13>,
	mulUnitAddT<14>,
	mulUnitAddT<15>,
	mulUnitAddT<16>,
#endif // MCL_SIZEOF_UNIT == 4
#endif // MCL_BINT_ASM == 1
};
#endif // MCL_BINT_ASM_X64 != 1
Unit mulUnitAddN(Unit *z, const Unit *x, Unit y, size_t n)
{
	return mclb_get_mulUnitAdd(n)(z, x, y);
}
