import sys
import argparse

def gen_func(name, ret, args, cname, params, i, asPointer=False):
	retstr = '' if ret == 'void' else ' return'
	if asPointer:
		print('#if MCL_BINT_ASM_X64 == 1')
		print(f'extern "C" {ret} (*{cname}{i})({args});')
		print(f'extern "C" {ret} {cname}_slow{i}({args});')
		print(f'extern "C" {ret} {cname}_fast{i}({args});')
		print('#else')
		print(f'extern "C" {ret} {cname}{i}({args});')
		print('#endif')
	else:
		print(f'extern "C" {ret} {cname}{i}({args});')
	print(f'template<> inline {ret} {name}<{i}>({args}) {{{retstr} {cname}{i}({params}); }}')

def gen_switch(name, ret, args, cname, params, N, N64, useFuncPtr=False):
	print(f'''Unit (*mclb_{name[0:-1]}Tbl[])({args}) = {{
#if MCL_BINT_ASM == 1''')
	print('\t0,')
	for i in range(1, N):
		if i == N64 + 1:
			print('#if MCL_SIZEOF_UNIT == 4')
		print(f'\tmclb_{name[0:-1]}{i},')
	print('#endif // MCL_SIZEOF_UNIT == 4')
	print('#else // MCL_BITN_ASM == 1')
	print('\t0,')
	for i in range(1, N):
		if i == N64 + 1:
			print('#if MCL_SIZEOF_UNIT == 4')
		print(f'\t{cname}<{i}>,')
	print('#endif // MCL_SIZEOF_UNIT == 4')
	print('''#endif // MCL_BINT_ASM == 1
};''')

	ret0 = 'return' if ret == 'void' else 'return 0'
	print(f'''{ret} {name}({args}, size_t n)
{{
	return mclb_get_{name[0:-1]}(n)({params});
}}''')

def gen_inst(name, ret, args, N, N64):
	for i in range(1, N):
		if i == N64 + 1:
			print('#if MCL_SIZEOF_UNIT == 4')
		print(f'template {ret} {name}<{i}>({args});')
	print('#endif')

arg_p3 = 'Unit *z, const Unit *x, const Unit *y'
arg_p2u = 'Unit *z, const Unit *x, Unit y'
param_u3 = 'z, x, y'

protoType = {
	arg_p3 : 'u_ppp',
	arg_p2u : 'u_ppu',
}

def roundup(x, n):
	return (x + n - 1) // n

def gen_get_func(name, ret, args, maxN, N, N64):
	print(f'''extern "C" {protoType[args]} mclb_{name}Tbl[];
inline {protoType[args]} mclb_get_{name}(size_t n)
{{
	if (n > {maxN}) n = 0;
	assert(n > 0);
	return mclb_{name}Tbl[n];
}}''')

def gen_disable(name1, name2, ret, args, N):
	print('#if MCL_BINT_ASM_X64 == 1')
	for i in range(1, N+1):
		print(f'{protoType[args]} mclb_{name1}{i} = mclb_{name1}_fast{i};')
		print(f'{protoType[args]} mclb_{name2}{i} = mclb_{name2}_fast{i};')
	print('extern "C" void mclb_disable_fast() {')
	for i in range(1, N+1):
		print(f'\tmclb_{name1}{i} = mclb_{name1}_slow{i};')
		print(f'\tmclb_{name2}{i} = mclb_{name2}_slow{i};')
	for i in range(1, N+1):
		print(f'\tmclb_{name1}Tbl[{i}] = mclb_{name1}_slow{i};')
		print(f'\tmclb_{name2}Tbl[{i}] = mclb_{name2}_slow{i};')
	print('}')
	print('#endif // MCL_BINT_ASM_X64 == 1')

def main():
	parser = argparse.ArgumentParser(description='gen header')
	parser.add_argument('out', type=str)
	parser.add_argument('-max_bit', type=int, default=512+32)
	opt = parser.parse_args()
	if not opt.out in ['proto', 'switch']:
		print('bad out', opt.out)
		sys.exit(1)
	N = roundup(opt.max_bit, 32)
	N64 = roundup(opt.max_bit, 64)
	addN = 32
	addN64 = 16

	print('// this code is generated by python3 src/gen_bint_header.py', opt.out)
	if opt.out == 'proto':
		print('#if MCL_BINT_ASM == 1')
		for i in range(1, addN+1):
			if i == addN64 + 1:
				print('#if MCL_SIZEOF_UNIT == 4')
			gen_func('addT', 'Unit', arg_p3, 'mclb_add', param_u3, i)
			gen_func('subT', 'Unit', arg_p3, 'mclb_sub', param_u3, i)
		print('#endif // #if MCL_SIZEOF_UNIT == 4')
		for i in range(1, N+1):
			if i == N64 + 1:
				print('#if MCL_SIZEOF_UNIT == 4')
			gen_func('mulUnitT', 'Unit', arg_p2u, 'mclb_mulUnit', param_u3, i, True)
			gen_func('mulUnitAddT', 'Unit', arg_p2u, 'mclb_mulUnitAdd', param_u3, i, True)
		print('#endif // #if MCL_SIZEOF_UNIT == 4')
		print('#endif // #if MCL_BINT_ASM == 1')
		print(f'''#if MCL_SIZEOF_UNIT == 8
	#define MCL_BINT_ADD_N {addN64}
	#define MCL_BINT_MUL_N {N64}
#else
	#define MCL_BINT_ADD_N {addN}
	#define MCL_BINT_MUL_N {N}
#endif''')
		gen_get_func('add', 'Unit', arg_p3, 'MCL_BINT_ADD_N', addN, addN64)
		gen_get_func('sub', 'Unit', arg_p3, 'MCL_BINT_ADD_N', addN, addN64)
		gen_get_func('mulUnit', 'Unit', arg_p2u, 'MCL_BINT_MUL_N', N, N64)
		gen_get_func('mulUnitAdd', 'Unit', arg_p2u, 'MCL_BINT_MUL_N', N, N64)
	elif opt.out == 'switch':
		print('#if MCL_BINT_ASM != 1')
		gen_inst('addT', 'Unit', arg_p3, addN, addN64)
		gen_inst('subT', 'Unit', arg_p3, addN, addN64)
		gen_inst('mulUnitT', 'Unit', arg_p2u, N, N64)
		gen_inst('mulUnitAddT', 'Unit', arg_p2u, N, N64)
		print('#endif // MCL_BINT_ASM != 1')
		gen_switch('addN', 'Unit', arg_p3, 'addT', param_u3, addN, addN64)
		gen_switch('subN', 'Unit', arg_p3, 'subT', param_u3, addN, addN64)
		gen_switch('mulUnitN', 'Unit', arg_p2u, 'mulUnitT', param_u3, N, N64, True)
		gen_switch('mulUnitAddN', 'Unit', arg_p2u, 'mulUnitAddT', param_u3, N, N64, True)
		gen_disable('mulUnit', 'mulUnitAdd', 'Unit', arg_p2u, N64)
	else:
		print('err : bad out', out)

main()

