def gen_func(name, ret, args, cname, cargs, i):
	if i == 0:
		print(f'template<size_t N>{ret} {name}({args});')
		return
	retstr = "" if ret == "void" else " return"
	print(f'extern "C" {ret} {cname}{i}({args});')
	print(f'template<> {ret} {name}<{i}>({args}) {{{retstr} {cname}{i}({cargs}); }}')


print('''#pragma once
// this code is generated by python3 src/gen_bitint_proto.py
namespace mcl { namespace bint {''')

N = 4
for i in range(N+1):
	gen_func("addT", "Unit", "Unit *z, const Unit *x, const Unit *y", "mclb_add", "z, x, y", i)
	gen_func("subT", "Unit", "Unit *z, const Unit *x, const Unit *y", "mclb_sub", "z, x, y", i)
	gen_func("mulUnitT", "Unit", "Unit *z, const Unit *x, Unit y", "mclb_mulUnit", "z, x, y", i)
	gen_func("mulUnitAddT", "Unit", "Unit *z, const Unit *x, Unit y", "mclb_mulUnitAdd", "z, x, y", i)

print('} } // mcl::bint')
