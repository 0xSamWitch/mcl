
@define bu = bit + unit
@define bu2 = bit + unit * 2
define void @mcl_fp_mont$(bit)(i$(bit)* %pz, i$(unit)* %px, i$(unit)* %py, i$(unit)* %pp, i$(unit) %r) {
	%ppt = bitcast i$(unit)* %pp to i$(bit)*
	%p = load i$(bit)* %ppt

@for i, 0, N
	%py$(i) = getelementptr i$(unit)* %py, i$(unit) $(i)
	%y$(i) = load i$(unit)* %py$(i)
	%xy$(i) = call i$(bu) @mulPv$(bit)x$(unit)(i$(unit)* %px, i$(unit) %y$(i))
@if i == 0
	%a0 = zext i$(bu) %xy0 to i$(bu2)

	%at$(i) = trunc i$(bu) %xy$(i) to i$(unit)
@else
	%xye$(i) = zext i$(bu) %xy$(i) to i$(bu2)
	%a$(i) = add i$(bu2) %s$(i-1), %xye$(i)
	%at$(i) = trunc i$(bu2) %a$(i) to i$(unit)
@endif
	%q$(i) = mul i$(unit) %at$(i), %r
	%pq$(i) = call i$(bu) @mulPv$(bit)x$(unit)(i$(unit)* %pp, i$(unit) %q$(i))
	%pqe$(i) = zext i$(bu) %pq$(i) to i$(bu2)
	%t$(i) = add i$(bu2) %a$(i), %pqe$(i)
	%s$(i) = lshr i$(bu2) %t$(i), $(unit)
@endfor
	%v = trunc i$(bu2) %s$(N-1) to i$(bu)
	%pe = zext i$(bit) %p to i$(bu)
	%vc = sub i$(bu) %v, %pe
	%c = lshr i$(bu) %vc, $(bit)
	%c1 = trunc i$(bu) %c to i1
	%z = select i1 %c1, i$(bu) %v, i$(bu) %vc
	%zt = trunc i$(bu) %z to i$(bit)
	store i$(bit) %zt, i$(bit)* %pz
	ret void
}

@define b2 = bit * 2
@define b2u = b2 + unit
define void @mcl_fp_montRed$(bit)(i$(bit)* %pz, i$(b2)* %pxy, i$(unit)* %pp, i$(unit) %r) {
	%ppt = bitcast i$(unit)* %pp to i$(bit)*
	%p = load i$(bit)* %ppt
	%xy = load i$(b2)* %pxy
	%t0 = zext i$(b2) %xy to i$(b2+unit)

@for i, 0, N
	%z0$(i+1) = trunc i$(b2u - unit * i) %t$(i) to i$(unit)
	%q$(i) = mul i$(unit) %z0$(i+1), %r
	%pq$(i) = call i$(bu) @mulPv$(bit)x$(unit)(i$(unit)* %pp, i$(unit) %q$(i))
	%pqe$(i) = zext i$(bu) %pq$(i) to i$(b2u - unit * i)
	%z$(i+1) = add i$(b2u - unit * i) %t$(i), %pqe$(i)
	%zt$(i+1) = lshr i$(b2u - unit * i) %z$(i+1), $(unit)
	%t$(i+1) = trunc i$(b2u - unit * i) %zt$(i+1) to i$(b2 - unit * i)
@endfor
	%pe = zext i$(bit) %p to i$(bu)
	%vc = sub i$(bu) %t$(N), %pe
	%c = lshr i$(bu) %vc, $(bit)
	%c1 = trunc i$(bu) %c to i1
	%z = select i1 %c1, i$(bu) %t$(N), i$(bu) %vc
	%zt = trunc i$(bu) %z to i$(bit)
	store i$(bit) %zt, i$(bit)* %pz
	ret void
}

